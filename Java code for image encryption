import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ImageEncryptionTool {

    public static BufferedImage encryptImage(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage encryptedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

        // Example: Simple XOR encryption
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int rgb = image.getRGB(x, y);

                // Extracting individual color channels
                int red = (rgb >> 16) & 0xFF;
                int green = (rgb >> 8) & 0xFF;
                int blue = rgb & 0xFF;

                // Encrypting pixel values (example: XOR with a key)
                red ^= 255;   // Example key: 255
                green ^= 255; // Example key: 255
                blue ^= 255;  // Example key: 255

                // Reconstructing the encrypted image
                int encryptedRGB = (red << 16) | (green << 8) | blue;
                encryptedImage.setRGB(x, y, encryptedRGB);
            }
        }
        return encryptedImage;
    }

    public static BufferedImage decryptImage(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage decryptedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

        // Example: Decrypting using the same XOR logic
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int rgb = image.getRGB(x, y);

                // Extracting individual color channels
                int red = (rgb >> 16) & 0xFF;
                int green = (rgb >> 8) & 0xFF;
                int blue = rgb & 0xFF;

                // Decrypting pixel values (reversing XOR with the same key)
                red ^= 255;   // Example key: 255
                green ^= 255; // Example key: 255
                blue ^= 255;  // Example key: 255

                // Reconstructing the decrypted image
                int decryptedRGB = (red << 16) | (green << 8) | blue;
                decryptedImage.setRGB(x, y, decryptedRGB);
            }
        }
        return decryptedImage;
    }

    public static void main(String[] args) {
        // Example usage: Replace this with your image file path
        String imagePath = "C:\\Users\\jobal\\OneDrive\\Pictures\\ln pf.jpeg";

        try {
            // Read the original image
            File input = new File(imagePath);
            if (!input.exists()) {
                System.out.println("Input image file not found at: " + imagePath);
                return;
            }
            BufferedImage originalImage = ImageIO.read(input);

            // Encrypt the image
            BufferedImage encryptedImage = encryptImage(originalImage);

            // Save the encrypted image
            File encryptedFile = new File("C:\\Users\\jobal\\OneDrive\\Desktop\\encrypted_image.jpg");
            ImageIO.write(encryptedImage, "jpg", encryptedFile);

            // Decrypt the encrypted image
            BufferedImage decryptedImage = decryptImage(encryptedImage);

            // Save the decrypted image
            File decryptedFile = new File("C:\\Users\\jobal\\OneDrive\\Desktop\\decrypted_image.jpg");
            ImageIO.write(decryptedImage, "jpg", decryptedFile);

            System.out.println("Encryption and decryption completed successfully.");
        } catch (IOException e) {
            System.out.println("Error reading or writing image: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
